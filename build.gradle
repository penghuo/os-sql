/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.4.0-SNAPSHOT")
        spring_version = "5.3.22"
        jackson_version = "2.14.0"
        jackson_databind_version = "2.14.0"
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        prometheus_binary_version = "2.37.2"
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            // 2.0.0-rc1-SNAPSHOT -> 2.0.0.0-rc1-SNAPSHOT (opensearch_build)
            opensearch_build += "-SNAPSHOT"
        }
        getArchType = {
            if (System.getProperty("os.arch").startsWith("x") || System.getProperty("os.arch").startsWith("amd")) {
                return "amd64"
            }
            else {
                return "arm64"
            }
        }
        getOSFamilyType = {
            def os = org.gradle.internal.os.OperatingSystem.current();
            if (os.isMacOsX()) {
                return "darwin"
            }
            else if(os.isLinux()){
                return "linux"
            }
            else if(os.isWindows()) {
                return "windows"
            }
            else {
                return os.getFamilyName().toString()
            }
        }
        getPrometheusBinaryLocation = { ->
            return "https://github.com/prometheus/prometheus/releases/download/v${prometheus_binary_version}/prometheus-${prometheus_binary_version}."+ getOSFamilyType() + "-" + getArchType() + ".tar.gz"
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

plugins {
    id 'nebula.ospackage' version "8.3.0"
    id 'java-library'
    id "com.diffplug.spotless" version "6.4.2" apply false
    id "io.freefair.lombok" version "6.4.0"
    id 'jacoco'
}

// Repository on root level is for dependencies that project code depends on. And this block must be placed after plugins{}
repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral() // For Elastic Libs that you can use to get started coding until open OpenSearch libs are available
}

allprojects {
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (buildVersionQualifier) {
        version += "-${buildVersionQualifier}"
    }

    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "11"
    }
}

subprojects {
    if (!it.name.startsWith('legacy')) {
        project.apply plugin: "com.diffplug.spotless"

        spotless {
            java {
                // Normally this isn't necessary, but we have Java sources in
                // non-standard places
                target 'src/*/java/**/*.java'

                removeUnusedImports()
                googleJavaFormat('1.15.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
                trimTrailingWhitespace()

                custom 'Refuse wildcard imports', {
                    // Wildcard imports can't be resolved; fail the build
                    if (it =~ /\s+import .*\*;/) {
                        throw new AssertionError("Do not use wildcard imports.  'spotlessApply' cannot resolve this issue.")
                    }
                }

                // See DEVELOPER_GUIDE.md for details of when to enable this.
                if (System.getProperty('spotless.paddedcell') != null) {
                    paddedCell()
                }
            }
        }

        build.dependsOn 'spotlessJavaCheck'
    }
}

subprojects {
    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
    }
}

// TODO: fix compiler warnings
compileJava.options.warnings = false
compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        // TODO: do not fail build on warnings, need to fix all compiler warnings
        options.compilerArgs.remove('-Werror')
        // TODO: need to fix all java doc format
        options.compilerArgs.remove('-Xdoclint:all')
    }
}
// TODO: Similarly, need to fix compiling errors in test source code
compileTestJava.options.warnings = false
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        options.compilerArgs.remove('-Werror')
        options.compilerArgs.remove('-Xdoclint:all')
    }
}

jacoco {
    toolVersion = "0.8.7"
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/antlr/parser/**'])
        }))
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }

        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/antlr/parser/**'])
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification

configurations.all {
    resolutionStrategy.force 'junit:junit:4.13.2'
    exclude group: "commons-logging", module: "commons-logging"
    // enforce 1.1.3, https://www.whitesourcesoftware.com/vulnerability-database/WS-2019-0379
    resolutionStrategy.force 'commons-codec:commons-codec:1.13'
    resolutionStrategy.force 'com.google.guava:guava:31.0.1-jre'
}

// updateVersion: Task to auto increment to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'.github/workflows/sql-workbench-test-and-build-workflow.yml', match:'OPENSEARCH_PLUGIN_VERSION: \\d+.\\d+.\\d+.\\d+', replace:'OPENSEARCH_PLUGIN_VERSION: ' + newVersion.tokenize('-')[0] + '.0', flags:'g', byline:true)
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
        ant.replaceregexp(match:'"version": "\\d+.\\d+.\\d+.\\d+', replace:'"version": ' + '"' + newVersion.tokenize('-')[0] + '.0', flags:'g', byline:true) {
            fileset(dir: projectDir) {
                include(name: "workbench/package.json")
                include(name: "workbench/opensearch_dashboards.json")
            }
        }
        ant.replaceregexp(file:'workbench/opensearch_dashboards.json', match:'"opensearchDashboardsVersion": "\\d+.\\d+.\\d+', replace:'"opensearchDashboardsVersion": ' + '"' + newVersion.tokenize('-')[0], flags:'g', byline:true)
    }
}
